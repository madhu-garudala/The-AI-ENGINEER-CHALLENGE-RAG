'use client';

import { useState } from 'react';

interface AnalysisResult {
  isLLM: boolean;
  percentage: number;
  reasoning: string;
}

export default function Home() {
  const [text, setText] = useState('');
  const [result, setResult] = useState<AnalysisResult | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const analyzeText = async () => {
    if (!text.trim()) return;
    
    setLoading(true);
    setError(null);
    
    try {
      const response = await fetch('/api/analyze', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ text }),
      });
      
      const data = await response.json();
      
      if (!response.ok) {
        throw new Error(data.error || 'Failed to analyze text');
      }

      if (data.error) {
        throw new Error(data.error);
      }

      setResult(data);
    } catch (err) {
      console.error('Analysis error:', err);
      setError(err instanceof Error ? err.message : 'An error occurred');
      setResult(null);
    } finally {
      setLoading(false);
    }
  };

  const characterCount = text.length;
  const isAnalyzeDisabled = loading || !text.trim();

  return (
    <div className="min-h-screen flex flex-col bg-gradient-to-b from-white to-gray-50">
      <main className="container mx-auto px-4 py-8">
        {/* Title Section */}
        <div className="text-center mb-12">
          <h1 className="text-5xl md:text-7xl font-bold mb-4 text-center bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
            WhoWroteIt
          </h1>
          <p className="text-gray-600 text-lg">
            A simple app that analyzes pasted text and tells if it was generated by a LLM or a human.
          </p>
        </div>

          {/* Input Section */}
          <div className="max-w-lg mx-auto w-full">
            <div className="rounded-2xl border border-gray-200 bg-white/90 shadow-sm">
              <div className="p-5 border-b border-gray-100 flex items-center justify-between">
                <div className="text-sm text-gray-600">Paste your text below</div>
                <div className="text-xs text-gray-400">{characterCount} characters</div>
              </div>
              <div className="p-5 space-y-5">
                <textarea
                  id="text-input"
                  className="w-full p-4 text-base text-gray-800 placeholder:text-gray-400 border border-gray-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500/40 focus:border-blue-500/60 bg-white"
                  placeholder="Enter or paste the text you want to analyze..."
                  value={text}
                  onChange={(e) => setText(e.target.value)}
                  style={{ height: '120px' }}
                />
                <div className="flex items-center justify-between">
                  <p className="text-xs text-gray-500">We do not store your input.</p>
                  <button
                    className={`inline-flex items-center gap-2 px-5 py-2.5 text-sm font-medium text-white rounded-lg transition-colors duration-200 shadow-sm ${
                      isAnalyzeDisabled ? 'bg-blue-400 cursor-not-allowed' : 'bg-blue-600 hover:bg-blue-700'
                    }`}
                    onClick={analyzeText}
                    disabled={isAnalyzeDisabled}
                  >
                    {loading && (
                      <span className="inline-block h-4 w-4 rounded-full border-2 border-white/40 border-t-white animate-spin" />
                    )}
                    {loading ? 'Analyzing' : 'Analyze Text'}
                  </button>
                </div>
                {error && (
                  <div className="mt-2 rounded-lg border border-red-200 bg-red-50 p-3 text-sm text-red-700">
                    {error}
                  </div>
                )}
              </div>
            </div>

            {/* Results Section */}
            {result && (
              <div className="mt-6 rounded-2xl border border-gray-200 bg-white/90 shadow-sm overflow-hidden">
                <div className="p-5 border-b border-gray-100 flex items-center justify-between">
                  <h2 className="text-lg font-semibold text-gray-900">Analysis Results</h2>
                  <span className={`inline-flex items-center rounded-full px-2.5 py-1 text-xs font-medium ${
                    result.isLLM ? 'bg-blue-50 text-blue-700 border border-blue-200' : 'bg-green-50 text-green-700 border border-green-200'
                  }`}>
                    {result.isLLM ? 'Likely AI' : 'Likely Human'}
                  </span>
                </div>
                <div className="p-5 space-y-4">
                  <div>
                    <div className="flex items-center justify-between text-sm text-gray-600">
                      <p>Confidence</p>
                      <p className="font-medium text-gray-800">{result.percentage}%</p>
                    </div>
                    <div className="mt-2 h-2.5 w-full rounded-full bg-gray-200">
                      <div className={`${result.isLLM ? 'bg-blue-600' : 'bg-green-600'} h-2.5 rounded-full transition-all`} style={{ width: `${result.percentage}%` }} />
                    </div>
                  </div>
                  {result.reasoning && (
                    <div>
                      <p className="text-sm font-medium text-gray-900 mb-1">Why we think so</p>
                      <p className="text-sm leading-6 text-gray-700 whitespace-pre-line">{result.reasoning}</p>
                    </div>
                  )}
                </div>
              </div>
            )}
          </div>
      </main>

      <footer className="fixed bottom-0 left-0 w-full py-6 border-t border-gray-100 bg-white/80 backdrop-blur-sm z-10">
        <div className="text-center text-xs text-gray-500">
          Built with Next.js and OpenAI Â· Confidence is an estimate, not a guarantee.
        </div>
      </footer>
    </div>
  );
}
